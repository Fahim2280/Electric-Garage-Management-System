@model IEnumerable<EGMS.DTOs.ElectricBillDTO>
@{
    ViewData["Title"] = "Electric Bills";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">
            <i class="fas fa-bolt text-warning me-2"></i>
            Electric Bills
        </h2>
        <div class="badge bg-info fs-6">Total Records: <span id="totalRecords">@Model.Count()</span></div>
    </div>

    <!-- Search and Filter Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">
                <i class="fas fa-search text-primary me-2"></i>
                Search & Filter
            </h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-calendar-alt text-primary me-1"></i>
                        From Date
                    </label>
                    <input type="date" class="form-control" id="fromDate" placeholder="Select start date">
                </div>
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-calendar-alt text-primary me-1"></i>
                        To Date
                    </label>
                    <input type="date" class="form-control" id="toDate" placeholder="Select end date">
                </div>
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-user text-primary me-1"></i>
                        Customer Name
                    </label>
                    <input type="text" class="form-control" id="customerSearch" placeholder="Search by customer name">
                </div>
                <div class="col-12">
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-primary" id="searchBtn">
                            <i class="fas fa-search me-1"></i> Search
                        </button>
                        <button type="button" class="btn btn-secondary" id="clearBtn">
                            <i class="fas fa-times me-1"></i> Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Bills</h6>
                            <h4 class="mb-0">৳<span id="totalBillSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-receipt fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Payments</h6>
                            <h4 class="mb-0">৳<span id="totalPaymentSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-hand-holding-usd fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Loans</h6>
                            <h4 class="mb-0">৳<span id="totalLoanSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-money-bill-wave fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Dues</h6>
                            <h4 class="mb-0">৳<span id="totalDuesSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bills Table -->
    <div class="card shadow-sm">
        <div class="card-header bg-warning text-dark">
            <h5 class="mb-0">
                <i class="fas fa-table me-2"></i>
                Electric Bills List
            </h5>
        </div>
        <div class="card-body p-0">
            <div class="table-container">
                <table class="table table-hover table-striped mb-0 compact-table" id="billsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Customer</th>
                            <th>Date</th>
                            <th>Prev Unit</th>
                            <th>Curr Unit</th>
                            <th>Total Unit</th>
                            <th>Electric Bill</th>
                            <th>Prev Dues</th>
                            <th>Rent</th>
                            <th>Loan</th>
                            <th>Total Bill</th>
                            <th>Payment</th>
                            <th>Dues</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-customer-name="@item.CustomerName?.ToLower()"
                                data-date="@item.Date.ToString("yyyy-MM-dd")"
                                data-datetime="@item.Date.ToString("yyyy-MM-dd HH:mm:ss")"
                                data-customer-id="@item.Customer_ID"
                                data-total-bill="@item.Total_bill"
                                data-payment="@item.Clear_money"
                                data-dues="@item.Present_dues"
                                data-loan="@item.Loan">
                                <td>
                                    <div class="customer-name">@Html.DisplayFor(modelItem => item.CustomerName)</div>
                                </td>
                                <td>
                                    <div class="date-time">
                                        <div>@item.Date.ToString("dd/MM/yyyy")</div>
                                        <small class="text-muted">@item.Date.ToString("HH:mm")</small>
                                    </div>
                                </td>
                                <td>@Html.DisplayFor(modelItem => item.Previous_unit)</td>
                                <td class="text-info fw-bold">@Html.DisplayFor(modelItem => item.Current_Unit)</td>
                                <td class="text-primary fw-bold">@Html.DisplayFor(modelItem => item.Total_Unit)</td>
                                <td class="text-success fw-bold">৳@Html.DisplayFor(modelItem => item.Electric_bill)</td>
                                <td class="text-warning">৳@Html.DisplayFor(modelItem => item.Previous_duos)</td>
                                <td class="text-info">৳@Html.DisplayFor(modelItem => item.Rent_Bill)</td>
                                <td class="text-warning fw-bold">৳@Html.DisplayFor(modelItem => item.Loan)</td>
                                <td class="text-success fw-bold">৳@Html.DisplayFor(modelItem => item.Total_bill)</td>
                                <td class="text-primary">৳@Html.DisplayFor(modelItem => item.Clear_money)</td>
                                <td>
                                    @if (item.Present_dues > 0)
                                    {
                                        <span class="badge bg-danger">৳@Html.DisplayFor(modelItem => item.Present_dues)</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">৳0.00</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer bg-light">
            <div class="d-flex justify-content-between align-items-center">
                <div class="text-muted">
                    Showing <span id="showingFrom">1</span> to <span id="showingTo">@Model.Count()</span> of <span id="totalItems">@Model.Count()</span> entries
                </div>
                <nav aria-label="Bills pagination">
                    <ul class="pagination pagination-sm mb-0" id="paginationControls">
                        <!-- Pagination buttons will be generated here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <!-- No Records Message -->
    <div id="noRecordsMessage" class="alert alert-info text-center mt-3" style="display: none;">
        <i class="fas fa-info-circle me-2"></i>
        No records found matching your search criteria.
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this electric bill?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-warning me-2"></i>
                    <strong>Customer:</strong> <span id="deleteCustomerName"></span><br>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i> Cancel
                </button>
                <form id="deleteForm" method="post" style="display: inline;">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-1"></i> Delete
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    /* Remove horizontal scrollbar and optimize table display */
    .table-container {
        overflow-x: hidden;
        width: 100%;
    }

    .compact-table {
        table-layout: fixed;
        width: 100%;
        min-width: 100%;
    }

        .compact-table th,
        .compact-table td {
            padding: 0.4rem 0.25rem;
            font-size: 0.8rem;
            word-wrap: break-word;
            vertical-align: middle;
            border-right: 1px solid #dee2e6;
        }

        .compact-table th {
            font-weight: 600;
            white-space: nowrap;
            background-color: #343a40 !important;
            color: white !important;
        }

            /* Updated column widths for 12 columns */
            .compact-table th:nth-child(1),
            .compact-table td:nth-child(1) {
                width: 11%;
            }

            .compact-table th:nth-child(2),
            .compact-table td:nth-child(2) {
                width: 9%;
            }

            .compact-table th:nth-child(3),
            .compact-table td:nth-child(3) {
                width: 6.5%;
            }

            .compact-table th:nth-child(4),
            .compact-table td:nth-child(4) {
                width: 6.5%;
            }

            .compact-table th:nth-child(5),
            .compact-table td:nth-child(5) {
                width: 6.5%;
            }

            .compact-table th:nth-child(6),
            .compact-table td:nth-child(6) {
                width: 8%;
            }

            .compact-table th:nth-child(7),
            .compact-table td:nth-child(7) {
                width: 7%;
            }

            .compact-table th:nth-child(8),
            .compact-table td:nth-child(8) {
                width: 6%;
            }

            .compact-table th:nth-child(9),
            .compact-table td:nth-child(9) {
                width: 6%;
            }

            .compact-table th:nth-child(10),
            .compact-table td:nth-child(10) {
                width: 8%;
            }

            .compact-table th:nth-child(11),
            .compact-table td:nth-child(11) {
                width: 7%;
            }

            .compact-table th:nth-child(12),
            .compact-table td:nth-child(12) {
                width: 7%;
            }

    .customer-name {
        font-weight: 600;
        color: #333;
    }

    .date-time {
        line-height: 1.2;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .card {
        border-radius: 15px;
        overflow: hidden;
    }

    .card-header {
        border-bottom: 2px solid rgba(0,0,0,0.1);
    }

    .btn {
        border-radius: 8px;
        font-weight: 500;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }

    .form-control {
        border-radius: 8px;
    }

    .alert {
        border-radius: 10px;
    }

    .modal-content {
        border-radius: 15px;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0,123,255,0.05);
    }

    .form-label {
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .summary-card {
        transition: transform 0.2s;
    }

        .summary-card:hover {
            transform: translateY(-2px);
        }

    /* Hide scrollbars completely */
    body {
        overflow-x: hidden;
    }

    .table-container::-webkit-scrollbar {
        display: none;
    }

    .table-container {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .pagination .page-link {
        color: #007bff;
        border: 1px solid #dee2e6;
        padding: 0.375rem 0.75rem;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
    }

    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        cursor: auto;
    }

    .pagination .page-link:hover {
        color: #0056b3;
        text-decoration: none;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }

    .compact-table th, .compact-table td {
        font-size: 0.75rem;
        padding: 0.3rem 0.2rem;
    }
</style>

<script>
    // Global variables
    let currentPage = 1;
    const itemsPerPage = 30;
    let totalPages = 1;
    let allRows = [];
    let filteredRows = [];

    document.addEventListener('DOMContentLoaded', function() {
        // Get DOM elements
        const fromDate = document.getElementById('fromDate');
        const toDate = document.getElementById('toDate');
        const customerSearch = document.getElementById('customerSearch');
        const searchBtn = document.getElementById('searchBtn');
        const clearBtn = document.getElementById('clearBtn');
        const billsTable = document.getElementById('billsTable');
        const noRecordsMessage = document.getElementById('noRecordsMessage');
        const totalRecords = document.getElementById('totalRecords');
        const tableBody = billsTable.getElementsByTagName('tbody')[0];

        // Summary elements
        const totalBillSum = document.getElementById('totalBillSum');
        const totalPaymentSum = document.getElementById('totalPaymentSum');
        const totalDuesSum = document.getElementById('totalDuesSum');
        const totalLoanSum = document.getElementById('totalLoanSum');

        // Initialize rows array
        allRows = Array.from(tableBody.getElementsByTagName('tr'));
        filteredRows = [...allRows];

        // Initialize the page
        updateSummations();
        updatePaginationInfo();

        // Function to update summations based on visible rows
        function updateSummations() {
            let totalBill = 0;
            let totalPayment = 0;
            let totalDues = 0;
            let totalLoan = 0;

            // Track latest records per customer for dues calculation
            const customerLatestRecords = {};

            // Process filtered rows
            filteredRows.forEach(row => {
                const customerId = row.getAttribute('data-customer-id');
                const datetime = row.getAttribute('data-datetime');
                const billAmount = parseFloat(row.getAttribute('data-total-bill')) || 0;
                const paymentAmount = parseFloat(row.getAttribute('data-payment')) || 0;
                const duesAmount = parseFloat(row.getAttribute('data-dues')) || 0;
                const loanAmount = parseFloat(row.getAttribute('data-loan')) || 0;

                // Add to totals
                totalBill += billAmount;
                totalPayment += paymentAmount;
                totalLoan += loanAmount;

                // Track latest record for each customer
                if (!customerLatestRecords[customerId] || datetime > customerLatestRecords[customerId].datetime) {
                    customerLatestRecords[customerId] = {
                        datetime: datetime,
                        dues: duesAmount
                    };
                }
            });

            // Sum dues only from latest records for each customer
            Object.values(customerLatestRecords).forEach(record => {
                totalDues += record.dues;
            });

            // Update display
            totalBillSum.textContent = totalBill.toFixed(2);
            totalPaymentSum.textContent = totalPayment.toFixed(2);
            totalDuesSum.textContent = totalDues.toFixed(2);
            totalLoanSum.textContent = totalLoan.toFixed(2);
        }

        // Function to update pagination info
        function updatePaginationInfo() {
            const totalItems = filteredRows.length;
            const startIndex = totalItems > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0;
            const endIndex = Math.min(currentPage * itemsPerPage, totalItems);

            document.getElementById('showingFrom').textContent = startIndex;
            document.getElementById('showingTo').textContent = endIndex;
            document.getElementById('totalItems').textContent = totalItems;
            document.getElementById('totalRecords').textContent = totalItems;
        }

        // Function to apply filters and pagination
        function applyFilters() {
            const fromDateValue = fromDate.value;
            const toDateValue = toDate.value;
            const customerValue = customerSearch.value.toLowerCase().trim();

            // Filter rows
            filteredRows = allRows.filter(row => {
                const customerName = row.getAttribute('data-customer-name');
                const rowDate = row.getAttribute('data-date');

                let showRow = true;

                // Filter by customer name
                if (customerValue && !customerName.includes(customerValue)) {
                    showRow = false;
                }

                // Filter by date range
                if (fromDateValue && rowDate < fromDateValue) {
                    showRow = false;
                }
                if (toDateValue && rowDate > toDateValue) {
                    showRow = false;
                }

                return showRow;
            });

            // Calculate total pages
            totalPages = Math.ceil(filteredRows.length / itemsPerPage);

            // Reset to first page if current page exceeds total pages
            if (currentPage > totalPages && totalPages > 0) {
                currentPage = 1;
            }

            // Hide all rows first
            allRows.forEach(row => {
                row.style.display = 'none';
            });

            // Show rows for current page
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const rowsToShow = filteredRows.slice(startIndex, endIndex);

            rowsToShow.forEach(row => {
                row.style.display = '';
            });

            // Update summations
            updateSummations();

            // Update pagination info
            updatePaginationInfo();

            // Generate pagination controls
            generatePaginationControls();

            // Show/hide no records message
            if (filteredRows.length === 0) {
                noRecordsMessage.style.display = 'block';
                billsTable.style.display = 'none';
            } else {
                noRecordsMessage.style.display = 'none';
                billsTable.style.display = 'table';
            }
        }

        // Function to generate pagination controls
        function generatePaginationControls() {
            const paginationControls = document.getElementById('paginationControls');

            if (totalPages <= 1) {
                paginationControls.innerHTML = '';
                return;
            }

            let paginationHTML = '';

            // Previous button
            paginationHTML += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="goToPage(${currentPage - 1}); return false;">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            `;

            // Page numbers
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            // Adjust start page if we're near the end
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            // First page if not visible
            if (startPage > 1) {
                paginationHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="goToPage(1); return false;">1</a>
                    </li>
                `;
                if (startPage > 2) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            // Page numbers
            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="goToPage(${i}); return false;">${i}</a>
                    </li>
                `;
            }

            // Last page if not visible
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
                paginationHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="goToPage(${totalPages}); return false;">${totalPages}</a>
                    </li>
                `;
            }

            // Next button
            paginationHTML += `
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="goToPage(${currentPage + 1}); return false;">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `;

            paginationControls.innerHTML = paginationHTML;
        }

        // Function to perform search
        function performSearch() {
            currentPage = 1; // Reset to first page
            applyFilters();
        }

        // Function to clear search
        function clearSearch() {
            fromDate.value = '';
            toDate.value = '';
            customerSearch.value = '';
            currentPage = 1;
            applyFilters();
        }

        // Event listeners
        searchBtn.addEventListener('click', performSearch);
        clearBtn.addEventListener('click', clearSearch);

        // Real-time search as user types
        customerSearch.addEventListener('input', performSearch);
        fromDate.addEventListener('change', performSearch);
        toDate.addEventListener('change', performSearch);

        // Initial load
        applyFilters();
    });

    // Global function for pagination
    function goToPage(page) {
        if (page < 1 || page > totalPages) return;

        currentPage = page;

        // Re-apply filters to show correct page
        const fromDate = document.getElementById('fromDate');
        const toDate = document.getElementById('toDate');
        const customerSearch = document.getElementById('customerSearch');

        const fromDateValue = fromDate.value;
        const toDateValue = toDate.value;
        const customerValue = customerSearch.value.toLowerCase().trim();

        // Filter rows
        filteredRows = allRows.filter(row => {
            const customerName = row.getAttribute('data-customer-name');
            const rowDate = row.getAttribute('data-date');

            let showRow = true;

            // Filter by customer name
            if (customerValue && !customerName.includes(customerValue)) {
                showRow = false;
            }

            // Filter by date range
            if (fromDateValue && rowDate < fromDateValue) {
                showRow = false;
            }
            if (toDateValue && rowDate > toDateValue) {
                showRow = false;
            }

            return showRow;
        });

        // Hide all rows first
        allRows.forEach(row => {
            row.style.display = 'none';
        });

        // Show rows for current page
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const rowsToShow = filteredRows.slice(startIndex, endIndex);

        rowsToShow.forEach(row => {
            row.style.display = '';
        });

        // Update summations
        let totalBill = 0;
        let totalPayment = 0;
        let totalDues = 0;
        let totalLoan = 0;

        // Track latest records per customer for dues calculation
        const customerLatestRecords = {};

        // Process filtered rows
        filteredRows.forEach(row => {
            const customerId = row.getAttribute('data-customer-id');
            const datetime = row.getAttribute('data-datetime');
            const billAmount = parseFloat(row.getAttribute('data-total-bill')) || 0;
            const paymentAmount = parseFloat(row.getAttribute('data-payment')) || 0;
            const duesAmount = parseFloat(row.getAttribute('data-dues')) || 0;
            const loanAmount = parseFloat(row.getAttribute('data-loan')) || 0;

            // Add to totals
            totalBill += billAmount;
            totalPayment += paymentAmount;
            totalLoan += loanAmount;

            // Track latest record for each customer
            if (!customerLatestRecords[customerId] || datetime > customerLatestRecords[customerId].datetime) {
                customerLatestRecords[customerId] = {
                    datetime: datetime,
                    dues: duesAmount
                };
            }
        });

        // Sum dues only from latest records for each customer
        Object.values(customerLatestRecords).forEach(record => {
            totalDues += record.dues;
        });

        // Update display
        document.getElementById('totalBillSum').textContent = totalBill.toFixed(2);
        document.getElementById('totalPaymentSum').textContent = totalPayment.toFixed(2);
        document.getElementById('totalDuesSum').textContent = totalDues.toFixed(2);
        document.getElementById('totalLoanSum').textContent = totalLoan.toFixed(2);

        // Update pagination info
        const totalItems = filteredRows.length;
        const startIndexDisplay = totalItems > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0;
        const endIndexDisplay = Math.min(currentPage * itemsPerPage, totalItems);

        document.getElementById('showingFrom').textContent = startIndexDisplay;
        document.getElementById('showingTo').textContent = endIndexDisplay;
        document.getElementById('totalItems').textContent = totalItems;
        document.getElementById('totalRecords').textContent = totalItems;

        // Generate pagination controls
        const paginationControls = document.getElementById('paginationControls');
        let paginationHTML = '';

        // Previous button
        paginationHTML += `
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="goToPage(${currentPage - 1}); return false;">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
        `;

        // Page numbers
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        // Adjust start page if we're near the end
        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        // First page if not visible
        if (startPage > 1) {
            paginationHTML += `
                <li class="page-item">
                    <a class="page-link" href="#" onclick="goToPage(1); return false;">1</a>
                </li>
            `;
            if (startPage > 2) {
                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
        }

        // Page numbers
        for (let i = startPage; i <= endPage; i++) {
            paginationHTML += `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="goToPage(${i}); return false;">${i}</a>
                </li>
            `;
        }

        // Last page if not visible
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
            paginationHTML += `
                <li class="page-item">
                    <a class="page-link" href="#" onclick="goToPage(${totalPages}); return false;">${totalPages}</a>
                </li>
            `;
        }

        // Next button
        paginationHTML += `
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" onclick="goToPage(${currentPage + 1}); return false;">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        `;

        paginationControls.innerHTML = paginationHTML;

        // Scroll to table top
        document.getElementById('billsTable').scrollIntoView({ behavior: 'smooth' });
    }

    // Delete confirmation function
    function confirmDelete(billId, customerName) {
        document.getElementById('deleteCustomerName').textContent = customerName;
        document.getElementById('deleteForm').action = `/ElectricBill/Delete/${billId}`;

        const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        deleteModal.show();
    }
</script>