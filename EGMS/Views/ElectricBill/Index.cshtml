@model IEnumerable<EGMS.DTOs.ElectricBillDTO>
@{
    ViewData["Title"] = "Electric Bills";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">
            <i class="fas fa-bolt text-warning me-2"></i>
            Electric Bills
        </h2>
        <div class="badge bg-info fs-6">Total Records: <span id="totalRecords">@Model.Count()</span></div>
    </div>

    <!-- Search and Filter Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">
                <i class="fas fa-search text-primary me-2"></i>
                Search & Filter
            </h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-calendar-alt text-primary me-1"></i>
                        From Date
                    </label>
                    <input type="date" class="form-control" id="fromDate" placeholder="Select start date">
                </div>
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-calendar-alt text-primary me-1"></i>
                        To Date
                    </label>
                    <input type="date" class="form-control" id="toDate" placeholder="Select end date">
                </div>
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-user text-primary me-1"></i>
                        Customer Name
                    </label>
                    <input type="text" class="form-control" id="customerSearch" placeholder="Search by customer name">
                </div>
                <div class="col-12">
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-primary" id="searchBtn">
                            <i class="fas fa-search me-1"></i> Search
                        </button>
                        <button type="button" class="btn btn-secondary" id="clearBtn">
                            <i class="fas fa-times me-1"></i> Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Bills</h6>
                            <h4 class="mb-0">৳<span id="totalBillSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-receipt fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Payments</h6>
                            <h4 class="mb-0">৳<span id="totalPaymentSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-hand-holding-usd fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total Dues</h6>
                            <h4 class="mb-0">৳<span id="totalDuesSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Balance</h6>
                            <h4 class="mb-0">৳<span id="balanceSum">0.00</span></h4>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-balance-scale fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bills Table -->
    <div class="card shadow-sm">
        <div class="card-header bg-warning text-dark">
            <h5 class="mb-0">
                <i class="fas fa-table me-2"></i>
                Electric Bills List
            </h5>
        </div>
        <div class="card-body p-0">
            <div class="table-container">
                <table class="table table-hover table-striped mb-0 compact-table" id="billsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Customer</th>
                            <th>Date</th>
                            <th>Prev Unit</th>
                            <th>Curr Unit</th>
                            <th>Total Unit</th>
                            <th>Electric Bill</th>
                            <th>Prev Dues</th>
                            <th>Rent</th>
                            <th>Total Bill</th>
                            <th>Payment</th>
                            <th>Dues</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-customer-name="@item.CustomerName?.ToLower()"
                                data-date="@item.Date.ToString("yyyy-MM-dd")"
                                data-datetime="@item.Date.ToString("yyyy-MM-dd HH:mm:ss")"
                                data-customer-id="@item.Customer_ID"
                                data-total-bill="@item.Total_bill"
                                data-payment="@item.Clear_money"
                                data-dues="@item.Present_dues">
                                <td>
                                    <div class="customer-name">@Html.DisplayFor(modelItem => item.CustomerName)</div>
                                </td>
                                <td>
                                    <div class="date-time">
                                        <div>@item.Date.ToString("dd/MM/yyyy")</div>
                                        <small class="text-muted">@item.Date.ToString("HH:mm")</small>
                                    </div>
                                </td>
                                <td>@Html.DisplayFor(modelItem => item.Previous_unit)</td>
                                <td class="text-info fw-bold">@Html.DisplayFor(modelItem => item.Current_Unit)</td>
                                <td class="text-primary fw-bold">@Html.DisplayFor(modelItem => item.Total_Unit)</td>
                                <td class="text-success fw-bold">৳@Html.DisplayFor(modelItem => item.Electric_bill)</td>
                                <td class="text-warning">৳@Html.DisplayFor(modelItem => item.Previous_duos)</td>
                                <td class="text-info">৳@Html.DisplayFor(modelItem => item.Rent_Bill)</td>
                                <td class="text-success fw-bold">৳@Html.DisplayFor(modelItem => item.Total_bill)</td>
                                <td class="text-primary">৳@Html.DisplayFor(modelItem => item.Clear_money)</td>
                                <td>
                                    @if (item.Present_dues > 0)
                                    {
                                        <span class="badge bg-danger">৳@Html.DisplayFor(modelItem => item.Present_dues)</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">৳0.00</span>
                                    }
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm delete-btn"
                                            data-bill-id="@item.ID"
                                            data-customer-name="@item.CustomerName"
                                            data-customer-id="@item.Customer_ID"
                                            data-datetime="@item.Date.ToString("yyyy-MM-dd HH:mm:ss")"
                                            style="display: none;">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- No Records Message -->
    <div id="noRecordsMessage" class="alert alert-info text-center mt-3" style="display: none;">
        <i class="fas fa-info-circle me-2"></i>
        No records found matching your search criteria.
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this electric bill?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-warning me-2"></i>
                    <strong>Customer:</strong> <span id="deleteCustomerName"></span><br>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i> Cancel
                </button>
                <form id="deleteForm" method="post" style="display: inline;">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-1"></i> Delete
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    /* Remove horizontal scrollbar and optimize table display */
    .table-container {
        overflow-x: hidden;
        width: 100%;
    }

    .compact-table {
        table-layout: fixed;
        width: 100%;
        min-width: 100%;
    }

        .compact-table th,
        .compact-table td {
            padding: 0.5rem 0.3rem;
            font-size: 0.85rem;
            word-wrap: break-word;
            vertical-align: middle;
            border-right: 1px solid #dee2e6;
        }

        .compact-table th {
            font-weight: 600;
            white-space: nowrap;
            background-color: #343a40 !important;
            color: white !important;
        }

            /* Column widths */
            .compact-table th:nth-child(1),
            .compact-table td:nth-child(1) {
                width: 12%;
            }

            .compact-table th:nth-child(2),
            .compact-table td:nth-child(2) {
                width: 10%;
            }

            .compact-table th:nth-child(3),
            .compact-table td:nth-child(3) {
                width: 7%;
            }

            .compact-table th:nth-child(4),
            .compact-table td:nth-child(4) {
                width: 7%;
            }

            .compact-table th:nth-child(5),
            .compact-table td:nth-child(5) {
                width: 7%;
            }

            .compact-table th:nth-child(6),
            .compact-table td:nth-child(6) {
                width: 9%;
            }

            .compact-table th:nth-child(7),
            .compact-table td:nth-child(7) {
                width: 8%;
            }

            .compact-table th:nth-child(8),
            .compact-table td:nth-child(8) {
                width: 7%;
            }

            .compact-table th:nth-child(9),
            .compact-table td:nth-child(9) {
                width: 9%;
            }

            .compact-table th:nth-child(10),
            .compact-table td:nth-child(10) {
                width: 8%;
            }

            .compact-table th:nth-child(11),
            .compact-table td:nth-child(11) {
                width: 8%;
            }

            .compact-table th:nth-child(12),
            .compact-table td:nth-child(12) {
                width: 8%;
            }

    .customer-name {
        font-weight: 600;
        color: #333;
    }

    .date-time {
        line-height: 1.2;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .card {
        border-radius: 15px;
        overflow: hidden;
    }

    .card-header {
        border-bottom: 2px solid rgba(0,0,0,0.1);
    }

    .btn {
        border-radius: 8px;
        font-weight: 500;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }

    .form-control {
        border-radius: 8px;
    }

    .alert {
        border-radius: 10px;
    }

    .modal-content {
        border-radius: 15px;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0,123,255,0.05);
    }

    .form-label {
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .summary-card {
        transition: transform 0.2s;
    }

        .summary-card:hover {
            transform: translateY(-2px);
        }

    .payment-check-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .payment-status-paid {
        background-color: #d4edda;
        color: #155724;
    }

    .payment-status-partial {
        background-color: #fff3cd;
        color: #856404;
    }

    .payment-status-unpaid {
        background-color: #f8d7da;
        color: #721c24;
    }

    .payment-summary-card {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .border-end {
        border-right: 1px solid #dee2e6;
    }

    /* Responsive adjustments */
    
        

    .compact-table th, .compact-table td {
        font-size: 0.8rem;
        padding: 0.4rem 0.2rem;
    }
     

    .compact-table th, .compact-table td {
        font-size: 0.75rem;
        padding: 0.3rem 0.15rem;
    }
    

    /* Hide scrollbars completely */
    body {
        overflow-x: hidden;
    }

    .table-container::-webkit-scrollbar {
        display: none;
    }

    .table-container {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const fromDate = document.getElementById('fromDate');
        const toDate = document.getElementById('toDate');
        const customerSearch = document.getElementById('customerSearch');
        const searchBtn = document.getElementById('searchBtn');
        const clearBtn = document.getElementById('clearBtn');
        const billsTable = document.getElementById('billsTable');
        const noRecordsMessage = document.getElementById('noRecordsMessage');
        const totalRecords = document.getElementById('totalRecords');
        const tableRows = billsTable.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

        // Summary elements
        const totalBillSum = document.getElementById('totalBillSum');
        const totalPaymentSum = document.getElementById('totalPaymentSum');
        const totalDuesSum = document.getElementById('totalDuesSum');
        const balanceSum = document.getElementById('balanceSum');

        // Initialize summations and delete buttons
        updateSummations();
        updateDeleteButtons();

        // Function to update delete buttons visibility
        function updateDeleteButtons() {
            // Group records by customer ID and find the latest record for each customer
            const customerLatestRecords = {};

            // First pass: find the latest datetime for each customer
            for (let i = 0; i < tableRows.length; i++) {
                const row = tableRows[i];
                const customerId = row.getAttribute('data-customer-id');
                const datetime = row.getAttribute('data-datetime');

                if (!customerLatestRecords[customerId] || datetime > customerLatestRecords[customerId].datetime) {
                    customerLatestRecords[customerId] = {
                        datetime: datetime,
                        rowIndex: i
                    };
                }
            }

            // Second pass: show delete button only for latest records
            for (let i = 0; i < tableRows.length; i++) {
                const row = tableRows[i];
                const customerId = row.getAttribute('data-customer-id');
                const deleteBtn = row.querySelector('.delete-btn');

                if (customerLatestRecords[customerId].rowIndex === i) {
                    deleteBtn.style.display = 'inline-block';
                } else {
                    deleteBtn.style.display = 'none';
                }
            }
        }

        // Function to update summations
        function updateSummations() {
            let totalBill = 0;
            let totalPayment = 0;
            let totalDues = 0;

            for (let i = 0; i < tableRows.length; i++) {
                const row = tableRows[i];

                // Only count visible rows
                if (row.style.display !== 'none') {
                    const billAmount = parseFloat(row.getAttribute('data-total-bill')) || 0;
                    const paymentAmount = parseFloat(row.getAttribute('data-payment')) || 0;
                    const duesAmount = parseFloat(row.getAttribute('data-dues')) || 0;

                    totalBill += billAmount;
                    totalPayment += paymentAmount;
                    totalDues += duesAmount;
                }
            }

            // Update display
            totalBillSum.textContent = totalBill.toFixed(2);
            totalPaymentSum.textContent = totalPayment.toFixed(2);
            totalDuesSum.textContent = totalDues.toFixed(2);

            // Calculate balance (Payment - Dues)
            const balance = totalPayment - totalDues;
            balanceSum.textContent = balance.toFixed(2);

            // Update balance card color based on positive/negative
            const balanceCard = balanceSum.closest('.card');
            if (balance >= 0) {
                balanceCard.className = 'card bg-success text-white';
            } else {
                balanceCard.className = 'card bg-warning text-dark';
            }
        }

        // Search functionality
        function performSearch() {
            const fromDateValue = fromDate.value;
            const toDateValue = toDate.value;
            const customerValue = customerSearch.value.toLowerCase();

            let visibleCount = 0;

            for (let i = 0; i < tableRows.length; i++) {
                const row = tableRows[i];
                const customerName = row.getAttribute('data-customer-name');
                const rowDate = row.getAttribute('data-date');

                let showRow = true;

                // Filter by customer name
                if (customerValue && !customerName.includes(customerValue)) {
                    showRow = false;
                }

                // Filter by date range
                if (fromDateValue && rowDate < fromDateValue) {
                    showRow = false;
                }
                if (toDateValue && rowDate > toDateValue) {
                    showRow = false;
                }

                if (showRow) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            }

            // Update total records count
            totalRecords.textContent = visibleCount;

            // Update summations after filtering
            updateSummations();
            // Update delete buttons after filtering
            updateDeleteButtons();

            // Show/hide no records message
            if (visibleCount === 0) {
                noRecordsMessage.style.display = 'block';
                billsTable.style.display = 'none';
            } else {
                noRecordsMessage.style.display = 'none';
                billsTable.style.display = 'table';
            }
        }

        // Clear search
        function clearSearch() {
            fromDate.value = '';
            toDate.value = '';
            customerSearch.value = '';

            for (let i = 0; i < tableRows.length; i++) {
                tableRows[i].style.display = '';
            }

            totalRecords.textContent = tableRows.length;
            noRecordsMessage.style.display = 'none';
            billsTable.style.display = 'table';

            // Update summations after clearing
            updateSummations();
            // Update delete buttons after clearing
            updateDeleteButtons();
        }

        // Event listeners
        searchBtn.addEventListener('click', performSearch);
        clearBtn.addEventListener('click', clearSearch);

        // Real-time search as user types
        customerSearch.addEventListener('input', performSearch);
        fromDate.addEventListener('change', performSearch);
        toDate.addEventListener('change', performSearch);

        // Delete button event listeners
        document.addEventListener('click', function(e) {
            if (e.target.closest('.delete-btn')) {
                const btn = e.target.closest('.delete-btn');
                const billId = btn.getAttribute('data-bill-id');
                const customerName = btn.getAttribute('data-customer-name');
                confirmDelete(billId, customerName);
            }
        });
    });

    // Delete confirmation function
    function confirmDelete(billId, customerName) {
        document.getElementById('deleteCustomerName').textContent = customerName;
        document.getElementById('deleteForm').action = `/ElectricBill/Delete/${billId}`;

        const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        deleteModal.show();
    }
</script>